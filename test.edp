// Libraries
load "iovtk"

// Parameters
real rho = 1;      // Densidade
real Cp = 1;       // Calor específico
real k = 0.1;      // Condutividade térmica
real mu = 0.01;    // Viscosidade dinâmica
real dt = 0.01;    // Passo de tempo
int n = 50;        // Resolução da malha

// Mesh: domínio quadrado (0,1) x (0,1)
mesh Th = square(n, n);

// Fespace
fespace Vh(Th, P2); // Espaço de funções para velocidade e temperatura
fespace Ph(Th, P1); // Espaço de funções para pressão
Vh u, v, uold, vold; // Velocidade (Navier-Stokes)
Ph p, pold;          // Pressão (Navier-Stokes)
Vh T, Told;          // Temperatura (Convecção-Difusão)

// Função parabólica para entrada de fluxo
func inlet = 4 * (y * (1 - y));


// Solver de Navier-Stokes
problem NavierStokes ([u, v, p], [uold, vold, pold])
    = int2d(Th)(rho * (dx(u) * dx(uold) + dy(u) * dy(uold))
              + rho * (dx(v) * dx(vold) + dy(v) * dy(vold))
              - p * (dx(uold) + dy(vold))
              + mu * (dx(u) * dx(uold) + dy(v) * dy(vold)))
    + on(1, u=inlet, v=0)
    + on(2, u=0, v=0)
    + on(3, u=0, v=0)
    + on(4, u=0, v=0);

// Solver de Convecção-Difusão
problem HeatEquation (T, Told)
    = int2d(Th)(rho * Cp * (u * dx(T) + v * dy(T)) * Told
              + k * (dx(T) * dx(Told) + dy(T) * dy(Told)))
    + on(1, T=1)
    + on(3, T=0);

// // Loop de tempo
// int steps = 100;
// for (int i = 0; i < steps; i++) {
//     cout << "Iteração: " << i << endl;

//     // Resolver Navier-Stokes
//     NavierStokes;

//     // Resolver Convecção-Difusão com velocidade obtida
//     HeatEquation;

//     // Atualizar campos
//     uold = u;
//     vold = v;
//     pold = p;
//     Told = T;
// }

// Plot resultados
plot(T, fill=true, value=true, wait=true);
