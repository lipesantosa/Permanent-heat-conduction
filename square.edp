load "iovtk"

// Parameters
int l = 0;
int h = 1;
int n = 10;

// Building Square
border a(t=l ,h){x=t; y=0;}
border b(t=l ,h){x=1; y=t;}
border c(t=l ,h){x=1-t; y=1;}
border d(t=l ,h){x=0; y=1-t;}

mesh Th = buildmesh(a(n) + b(n) + c(n) + d(n)); 

// Plot Square
plot(Th, wait=0, fill=1, cmm="Square");

// Functions space
fespace Vh(Th, [P1, P1]);
Vh [vx, vy], [vxTeste, vyTeste];

// Boundary conditions
solve velocity([vx, vy], [vxTeste, vyTeste]) = 
    int2d(Th)(dx(vx)*dx(vxTeste) + dy(vx)*dy(vxTeste) + 
              dx(vy)*dx(vyTeste) + dy(vy)*dy(vyTeste)) + 
    on(c, vx=1, vy=0) + 
    on(a, b, d, vx=0, vy=0);

plot([vx, vy], wait=1, fill=0, cmm="Step");

// // Alternative
// plot(vx, wait=1, fill=1, cmm="Velocity in x");
// plot(vy, wait=1, fill=1, cmm="Velocity in y");

savevtk("D:/Documentos/Permanent-heat-conduction/data/square.vtk", Th, [vx, vy]);

// Save archive in txt
ofstream dataSquare("D:/Documentos/Permanent-heat-conduction/data/data_square.txt");

dataSquare << "x                      |y                      |vx                     |vy         " << endl;

for (int i = 0; i < Th.nv; i++) { 
    real xVal = Th(i).x;  
    real yVal = Th(i).y; 
    real vxVal = vx[](i); 
    real vyVal = vy[](i); 

    dataSquare << xVal << "                   |" << yVal << "                     |" << vxVal << "                        |" << vyVal << endl;
}

cout << "Arquivo 'data_square.txt' salvo com sucesso!" << endl;