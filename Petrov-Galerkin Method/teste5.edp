load "iovtk"

// --- Parâmetros físicos e numéricos ---
real Re = 1000;
real nu = 1.0 / Re;
real tol = 1e-6;
int imax = 100;

// --- Malha: Cavidade quadrada ---
border a1(t=0,1){x=t; y=0; label=3;}
border a2(t=0,1){x=1; y=t; label=4;}
border a3(t=0,1){x=1-t; y=1; label=1;}
border a4(t=0,1){x=0; y=1-t; label=2;}
int n = 80;
mesh Th = buildmesh(a1(n)+a2(n)+a3(n)+a4(n));

// --- Espaços de função ---
fespace Vh(Th, P1);          // Velocidade escalar
fespace Ph(Th, P1);          // Pressão
fespace Xh(Th, [P1, P1, P1]); // [u1, u2, p]
Xh [wx, wy, wp];

Vh u1n=0, u2n=0, du1=0, du2=0, v1, v2;
Ph pn=0, dp=0, q;

func f1 = 0;
func f2 = 0;

int iter = 0;
bool convergiu = false;

while (iter < imax && !convergiu) {

    real[int] tauK(Th.nt);
    for (int k = 0; k < Th.nt; k++) {
        // Tamanho característico hk (usando área como aproximação)
        real hk = sqrt(Th[k].measure);

        // Média da velocidade no elemento k
        real ux = 0, uy = 0;
        for (int i = 0; i < 3; i++) {
            int node = Th[k][i];
            ux += u1n[](node);
            uy += u2n[](node);
        }
        ux /= 3.0;
        uy /= 3.0;
        real umod = abs(sqrt(ux^2 + uy^2));  // Evitar divisão por zero

        // Número de Reynolds local
        real Rek = (umod * hk) / (4.0 * nu);

            // Função zeta (Rek/tanh(Rek))
        real zeta = (Rek > 1e-8) ? (Rek / tanh(Rek)) : 1.0;

            // Tau final para o elemento
        tauK[k] = (1e-4/(sqrt((2.0*umod/hk))^2  + (4.0 * nu/hk^2))) ;
    }    

    // --- Resíduo Convencional ---
    varf Res([du1, du2, dp], [v1, v2, q]) =
        int2d(Th)(
            - nu*(dx(u1n)*dx(v1) + dy(u1n)*dy(v1) + dx(u2n)*dx(v2) + dy(u2n)*dy(v2))
            + (u1n*dx(u1n) + u2n*dy(u1n)) * v1
            + (u1n*dx(u2n) + u2n*dy(u2n)) * v2
            - pn*(dx(v1) + dy(v2))
            - q*(dx(u1n) + dy(u2n))
            - f1*v1 - f2*v2
        )
        + on(1, du1=1, du2=0)
        + on(2,3,4, du1=0, du2=0)
        + on(1, dp=0);  // Fixar pressão num ponto (essencial)

    // --- Resíduo GLS ---
    varf ResGLS([du1, du2, dp], [v1, v2, q]) =
        int2d(Th)(
            tauK[region] * (
                (u1n*dx(u1n) + u2n*dy(u1n) + dx(pn)) * (u1n*dx(v1) + u2n*dy(v1) + dx(q)) +
                (u1n*dx(u2n) + u2n*dy(u2n) + dy(pn)) * (u1n*dx(v2) + u2n*dy(v2) + dy(q)) +
                (dx(u1n)+dy(u2n)) * (dx(v1)+dy(v2))
            )
        );

    // --- Jacobiano Convencional ---
    varf Jac([du1, du2, dp], [v1, v2, q]) =
        int2d(Th)(
            - nu*(dx(du1)*dx(v1) + dy(du1)*dy(v1) + dx(du2)*dx(v2) + dy(du2)*dy(v2))
            + (du1*dx(u1n) + du2*dy(u1n)) * v1
            + (u1n*dx(du1) + u2n*dy(du1)) * v1
            + (du1*dx(u2n) + du2*dy(u2n)) * v2
            + (u1n*dx(du2) + u2n*dy(du2)) * v2
            - dp*(dx(v1) + dy(v2))
            - q*(dx(du1) + dy(du2))
        )
        + on(1, du1=0, du2=0)
        + on(2,3,4, du1=0, du2=0)
        + on(1, dp=0);  // Também no Jacobiano, para a pressão

    // --- Jacobiano GLS ---
    varf GLS([du1, du2, dp], [v1, v2, q]) =
        int2d(Th)(
            tauK[region] * (
                (u1n*dx(du1) + u2n*dy(du1) + dx(dp)) * (u1n*dx(v1) + u2n*dy(v1) + dx(q))
              + (u1n*dx(du2) + u2n*dy(du2) + dy(dp)) * (u1n*dx(v2) + u2n*dy(v2) + dy(q))
              + (dx(du1)+dy(du2)) * (dx(v1)+dy(v2))
            )
        );

    // --- Montagem ---
    matrix J = Jac(Xh, Xh);
    matrix JGLS = GLS(Xh, Xh);
    J += JGLS;

    real[int] R = Res(0, Xh);
    real[int] RGLS = GLS(0, Xh);
    real[int] F = R + RGLS;
    real[int] minusF = -1 * F;

    set(J, solver=UMFPACK);
    wx[] = J^-1 * minusF;

    [du1[], du2[], dp[]] = wx[];

    // --- Atualização com under-relaxation ---

    u1n[] += du1[];
    u2n[] += du2[];
    pn[]  += dp[];

    // Critério de convergência:
    real normDelta = sqrt(wx[].l2^2 + wy[].l2^2 + wp[].l2^2);
    cout << "Iteracao Newton: " << iter << ", ||Delta|| = " << normDelta << endl;

    if (normDelta < tol) convergiu = true;

    iter++;
}

// --- Erro de divergência ---
real diverror = sqrt(int2d(Th)((dx(u1n) + dy(u2n))^2));
cout << "Norma L2 da divergencia final: " << diverror << endl;

if (!convergiu)
    cout << "Newton NAO convergiu apos " << imax << " iteracoes" << endl;

plot([u1n, u2n], cmm="Velocidade ", wait=1, value=true, fill=true);
plot(pn, cmm="Pressao", wait=1, value=true, fill=true);

//savevtk("D:/Documentos/Petrov-Galerkin Method/results100.vtu", Th, [u1n, u2n], pn, dataname = "velocity pressure");