// Libraries 
load "iovtk"

// Mesh
border a1(t=0,1){x=t; y=0; label=2;}
border a2(t=0,1){x=1; y=t; label=2;}
border a3(t=0,1){x=1-t; y=1; label=1;}
border a4(t=0,1){x=0; y=1-t; label=2;}
int n = 80;
mesh Th = buildmesh(a1(n)+a2(n)+a3(n)+a4(n));

// Fespace
fespace Vh(Th, P1);
fespace Qh(Th, P1);
fespace ThT(Th, P1);

Vh u1, u2, u1old, u2old, v1, v2, ht;
Qh p, q;
ThT Told, vT;

// Parameters 
real Re = 100;
real nu = 1.0 / Re;
real dt = 0.1;        // time steps
int nmax = 20;        // number of time steps
int itmax = 20;        // number of picard iterations

// Macros & Tau
macro umod() sqrt(u1old^2 + u2old^2) //
ht = hTriangle;
macro tau() (1.0e-4 / sqrt((2/dt) + (2.0 * umod / ht)^2 + (4.0 * nu / (ht^2))^2)) //

// Initialization
u1 = 0; u2 = 0;
u1old = u1;
u2old = u2;

// Time loop
while (int n = 0; n < nmax; ++n) {
    cout << "\n>>> Tempo t = " << n*dt << endl;

    // Picard
    for (int it = 0; it < itmax; ++it) {
        cout << "  Iteracao Picard = " << it << endl;

        problem NSE([u1, u2, p], [v1, v2, q]) =
            int2d(Th)(
                (1.0/dt)*(u1 * v1 + u2 * v2)
              + nu * (dx(u1)*dx(v1) + dy(u1)*dy(v1) + dx(u2)*dx(v2) + dy(u2)*dy(v2))
              + u1old * dx(u1) * v1 + u2old * dy(u1) * v1
              + u1old * dx(u2) * v2 + u2old * dy(u2) * v2
              - p * q * 1e-6
              - p * (dx(v1) + dy(v2))
              - q * (dx(u1) + dy(u2))
            )
            // GLS part 1: (Rm, Sm)
            + int2d(Th)(
                tau * (
                    u1old * dx(u1) * u1old * dx(v1) +
                    u1old * dx(u1) * u2old * dy(v1) +
                    u2old * dy(u1) * u1old * dx(v1) +
                    u2old * dy(u1) * u2old * dy(v1) +
                    u1old * dx(u2) * u1old * dx(v2) +
                    u1old * dx(u2) * u2old * dy(v2) +
                    u2old * dy(u2) * u1old * dx(v2) +
                    u2old * dy(u2) * u2old * dy(v2)
                )
            )
            + int2d(Th)(
                tau * (
                    dx(p) * (u1old * dx(v1) + u2old * dy(v1)) +
                    dy(p) * (u1old * dx(v2) + u2old * dy(v2))
                )
            )
            - int2d(Th)(
                tau * nu * (
                    (dxx(u1)+dyy(u1)) * (u1old * dx(v1) + u2old * dy(v1)) +
                    (dxx(u2)+dyy(u2)) * (u1old * dx(v2) + u2old * dy(v2))
                )
            )
            // GLS part 2: (Rc, Sc)
            + int2d(Th)(
                tau * (
                    dx(q)*(u1old*dx(u1) + u2old*dy(u1)) +
                    dy(q)*(u1old*dx(u2) + u2old*dy(u2))
                )
            )
            + int2d(Th)(tau * (dx(p)*dx(q) + dy(p)*dy(q)))
            - int2d(Th)(
                tau * nu * (
                    dx(q)*(dxx(u1) + dyy(u1)) +
                    dy(q)*(dxx(u2) + dyy(u2))
                )
            )
            // GLS part 3: (-nu Î”v, Rm)
            - int2d(Th)(
                tau * nu * (
                    (dxx(v1)+dyy(v1))*(u1old*dx(u1) + u2old*dy(u1)) +
                    (dxx(v2)+dyy(v2))*(u1old*dx(u2) + u2old*dy(u2))
                )
            )
            - int2d(Th)(
                tau * nu * (
                    (dxx(v1)+dyy(v1)) * dx(p) +
                    (dxx(v2)+dyy(v2)) * dy(p)
                )
            )
            + int2d(Th)(
                tau * nu^2 * (
                    (dxx(v1)+dyy(v1))*(dxx(u1)+dyy(u1)) +
                    (dxx(v2)+dyy(v2))*(dxx(u2)+dyy(u2))
                )
            )
            // Boundary Conditions 
            - int1d(Th, 2)(p / nu * v1)
            + on(2, u1 = 0, u2 = 0)
            + on(1, u1 = 1, u2 = 0);

        NSE;
        u1old = u1;
        u2old = u2;

    solve heat(T, vT) =
    int2d(Th)(
        1/dt * T * vT
        (u1 * dx(T) + u2 * dy(T)) * vT   // termo convectivo
      + kappa * (dx(T) * dx(vT) + dy(T) * dy(vT)) // termo difusivo
    )
    + on(1, T=50)
    + on(2, T=0);

    Told = T
    }

    // Plot
    plot([u1, u2], wait = 0, fill=true, value=true, cmm = "Velocidade t=" + n*dt);
    // plot(p, wait = 1, fill=true, value=true, cmm = "Pressure t=" + n*dt );

    
    savevtk("D:/Documentos/Petrov-Galerkin Method/Data/results100_t="+t+".vtu", Th, [u1, u2], p, T, dataname = "Velocity Pressure Temperature");
}
