load "iovtk"

// --- Parâmetros fixos gerais ---
real tol = 1e-6;
int imax = 100;
int n = 80; // Refinamento da malha (aumente se quiser mais precisão)

// --- Malha da cavidade ---
border a1(t=0,1){x=t; y=0; label=3;}
border a2(t=0,1){x=1; y=t; label=4;}
border a3(t=0,1){x=1-t; y=1; label=1;}
border a4(t=0,1){x=0; y=1-t; label=2;}
mesh Th = buildmesh(a1(n)+a2(n)+a3(n)+a4(n));

// --- Espaços de função ---
fespace Vh(Th, P1);
fespace Ph(Th, P1);
fespace Xh(Th, [P1, P1, P1]);

// --- Variáveis do sistema ---
Vh u1n=0, u2n=0, du1=0, du2=0, v1, v2;
Ph pn=0, dp=0, q;
Xh [wx, wy, wp];

func fx=0;
func fy=0;

real hmin = Th.hmin;


// --- Lista de Reynolds para continuar ---
real[int] ListaRe = [100, 200, 300, 400];

for (int k=0; k<ListaRe.n; k++) {

    real Re = ListaRe[k];
    real nu = 1.0 / Re;
    real deltaGLS = hmin^2 / (4 * nu);  // Ajuste de delta para cada Re

    cout << "==============================" << endl;
    cout << "Iniciando Re = " << Re << endl;
    cout << "deltaGLS = " << deltaGLS << endl;

    int iter = 0;
    bool convergiu = false;

    while (iter < imax && !convergiu) {

        // --- Resíduo Convencional ---
        varf Res([du1, du2, dp], [v1, v2, q], optimize=0) =
            int2d(Th)(
                - nu*(dx(u1n)*dx(v1) + dy(u1n)*dy(v1) + dx(u2n)*dx(v2) + dy(u2n)*dy(v2))
                + (u1n*dx(u1n) + u2n*dy(u1n)) * v1
                + (u1n*dx(u2n) + u2n*dy(u2n)) * v2
                - pn*(dx(v1) + dy(v2))
                - q*(dx(u1n) + dy(u2n))
                - (fx*v1 + fy*v2)
            )
            + on(1, du1=1, du2=0)
            + on(2,3,4, du1=0, du2=0);
            //+ on(1, dp=0);

        // --- Resíduo GLS ---
        varf ResGLS([du1, du2, dp], [v1, v2, q]) =
            int2d(Th)(
                deltaGLS * (
                    (u1n*dx(u1n) + u2n*dy(u1n) + dx(pn)) * (u1n*dx(v1) + u2n*dy(v1) + dx(q)) +
                    (u1n*dx(u2n) + u2n*dy(u2n) + dy(pn)) * (u1n*dx(v2) + u2n*dy(v2) + dy(q)) +
                    (dx(u1n)+dy(u2n)) * (dx(v1)+dy(v2))
                )
            );

        // --- Jacobiano Convencional ---
        varf Jac([du1, du2, dp], [v1, v2, q], optimize=0) =
            int2d(Th)(
                - nu*(dx(du1)*dx(v1) + dy(du1)*dy(v1) + dx(du2)*dx(v2) + dy(du2)*dy(v2))
                + (du1*dx(u1n) + du2*dy(u1n)) * v1
                + (u1n*dx(du1) + u2n*dy(du1)) * v1
                + (du1*dx(u2n) + du2*dy(u2n)) * v2
                + (u1n*dx(du2) + u2n*dy(du2)) * v2
                - dp*(dx(v1) + dy(v2))
                - q*(dx(du1) + dy(du2))
            )
            + on(1, du1=0, du2=0)
            + on(2,3,4, du1=0, du2=0);
            //+ on(1, dp=0);

        // --- Jacobiano GLS ---
        varf GLS([du1, du2, dp], [v1, v2, q], optimize=0) =
            int2d(Th)(
                deltaGLS * (
                    (u1n*dx(du1) + u2n*dy(du1) + dx(dp)) * (u1n*dx(v1) + u2n*dy(v1) + dx(q))
                  + (u1n*dx(du2) + u2n*dy(du2) + dy(dp)) * (u1n*dx(v2) + u2n*dy(v2) + dy(q))
                  + (dx(du1)+dy(du2)) * (dx(v1)+dy(v2))
                )
            );

      // --- Montagem ---
      matrix J = Jac(Xh, Xh);
      matrix JGLS = GLS(Xh, Xh);
      J += JGLS;

      real[int] R = Res(0, Xh);
      real[int] RGLS = ResGLS(0, Xh);
      real[int] F = R + RGLS;
      real[int] minusF = -1 * F;

      set(J, solver=UMFPACK);
      wx[] = J^-1 * minusF;

      // --- Atualização com under-relaxation ---
      [du1[], du2[], dp[]] = wx[];

    // --- Atualização com under-relaxation ---

      u1n[] += du1[];
      u2n[] += du2[];
      pn[]  += dp[];



      real normDelta = sqrt(du1[].l2^2 + du2[].l2^2 + dp[].l2^2);
      cout << "Re=" << Re << " Iter=" << iter << " ||Delta|| = " << normDelta << endl;

      if (normDelta < tol) convergiu = true;

      iter++;
    }

    real diverror = sqrt(int2d(Th)((dx(u1n) + dy(u2n))^2));
    cout << "Re=" << Re << ", Divergencia L2 final: " << diverror << endl;

    if (!convergiu)
        cout << "Newton NAO convergiu para Re=" << Re << endl;

    plot([u1n,u2n], cmm="Velocidade para Re="+Re, wait=true, value=true, fill=true);
}

