// Libraries
load "iovtk"

//Parameters
int i = 0;
int h = 1;
int j = 2;
int n = 10;

// Mesh
border a(t=h, j) {x=t; y=0;}        //Bottom
border b(t=i, j) {x=2; y=t;}        //Right 
border c(t=i, j) {x=2-t; y=2;}      //Top
border d(t=i, h) {x=0; y=2-t;}      //Top left
border e(t=i, h) {x=t; y=1;}        //mid
border f(t=i, h) {x=1; y=1-t;}      //Bottom left


// Plot mesh
mesh Th = buildmesh(a(n) + b(n) + c(n) + d(n) + e(n) + f(n)); 

plot(Th, wait=0, fill=0);

// Functions space                     
fespace Vh(Th, [P1,P1]);
Vh [vx, vy], [vxTeste, vyTeste];

// Boundary Conditions
func parabola = y^2 - 3*y + 3;

solve velocity([vx, vy], [vxTeste, vyTeste]) =
    int2d(Th)(dx(vx)*dx(vxTeste) + dx(vy)*dx(vyTeste) + 
              dy(vx)*dy(vxTeste) + dy(vy)*dy(vyTeste)) +
    on(a, c, e, f, vx=0, vy=0) + 
    on(d, vx= parabola, vy=0) + 
    int2d(Th, b)(vxTeste + vyTeste);

// Plot
// plot([vx, vy], wait=1, fill=1, value=true, cmm="Step"); 

// Alternative
plot(vx, wait=1, fill=1, cmm="Velocity in x");
plot(vy, wait=1, fill=1, cmm="Velocity in y");

savevtk("D:/Documentos/Permanent-heat-conduction/data/step.vtk", Th, [vx, vy]);

// Save archive in txt
ofstream dataStep("D:/Documentos/Permanent-heat-conduction/data/data_step.txt");

dataStep << "x                      |y                      |vx                     |vy         " << endl;

for (int i = 0; i < Th.nv; i++) { 
    real xVal = Th(i).x;  
    real yVal = Th(i).y; 
    real vxVal = vx[](i); 
    real vyVal = vy[](i); 

    dataStep << xVal << "                   |" << yVal << "                     |" << vxVal << "                        |" << vyVal << endl;
}

cout << "Arquivo 'data_step.txt' salvo com sucesso!" << endl;