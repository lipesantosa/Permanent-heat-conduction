load "iovtk"

// Domínio
mesh Th = square(20, 20);

// Espaços de função (Babuška-Brezzi P2-P1)
fespace Vh(Th, P2); // velocidade
fespace Qh(Th, P1); // pressão

Vh u1, u2, v1, v2;
Qh p, q;

// Parâmetros físicos
real nu = 1.0; // viscosidade
func fx = 0;
func fy = 0; // força externa

// Condições de contorno: velocidade = 0 nas bordas
func inlet = 4*y*(1 - y); // opcional: condição de entrada

// Sistema de Navier-Stokes linearizado (ou Stokes)
problem NavierStokes([u1, u2, p], [v1, v2, q]) =
    int2d(Th)(
        nu*(dx(u1)*dx(v1) + dy(u1)*dy(v1) +
            dx(u2)*dx(v2) + dy(u2)*dy(v2)) // viscosidade
      + (dx(u1) + dy(u2))*q               // div(u)*q
      + (dx(v1) + dy(v2))*p               // div(v)*p
    )
    + on(2, 3, 4, u1=0, u2=0)
    +on(1, u1=inlet, u2=0); // parede com velocidade zero

NavierStokes;

// Plot (opcional)
plot([u1, u2], wait=1, cmm="Velocidade");

savevtk("velocidade.vtk", Th, [u1, u2], dataname="Velocity");


