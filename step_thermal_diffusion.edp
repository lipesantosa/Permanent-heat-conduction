// Libraries
load "iovtk"

// Parameters
int h = 5;
int i = 0;
int j = 20;
int m = 2;
int l = 1;
int n = 30;

real mu = 1.0; 

real rho = 1;     
real Cp = 1;      
real k = 1; 

func fx = 0;   
func fy = 0; 

// Mesh
border a(t=h, j) {x=t; y=0; label=1;}        
border b(t=i, m) {x=j; y=t; label=2;}       
border c(t=i, j) {x=j-t; y=m; label=3;}     
border d(t=i, l) {x=i; y=2-t; label=4;}      
border e(t=i, h) {x=t; y=l; label=5;}        
border f(t=i, l) {x=h; y=1-t; label=6;}      

mesh Th = buildmesh(a(n) + b(n) + c(n) + d(n) + e(n) + f(n)); 

// Fespace
fespace Uh(Th, P2);
Uh u1, u2;
Uh v1, v2;

fespace Ph(Th, P1);
Ph p;
Ph q;

fespace Vh(Th, P1);
Vh T, Tn;

func parabola = -3*(y-1)*(y-2);

//Solve velocities
problem Stokes([u1, u2, p], [v1, v2, q]) =
    int2d(Th)(mu * (dx(u1)*dx(v1) + dy(u1)*dy(v1)
                  + dx(u2)*dx(v2) + dy(u2)*dy(v2))
              - p*(dx(v1) + dy(v2))
              - q*(dx(u1) + dy(u2)))
    + int2d(Th)(fx*v1 + fy*v2)
    + on(1, 3, 5, 6, u1=0, u2=0) 
    + on(4, u1=parabola, u2=0)
    + int2d(Th, 2)(v1 + v2);

Stokes;

//Solve temperatures
problem Thermic (T, Tn)
    = int2d(Th)(rho * Cp * (u1 * dx(T) + u2 * dy(T)) * Tn)   // Convection term
    + int2d(Th)(k * ((dx(T) * dx(Tn)) + (dy(T) * dy(Tn)))) // Diffusion term
    + on(1, 3, 5, 6, T=0)  // Thermal boundary conditions
    + on(4, T=parabola)
    - int1d(Th, 2)(k * dx(T) * Tn);     // Hot walls (example)    

Thermic;

plot(u1,u2,p,T, fill=true, value=true, wait=true);


//Save .vtk
savevtk("Step_Velocity.vtk", Th, [u1, u2], dataname="velocity");
savevtk("Step_Pressure.vtk", Th, p, dataname="pressure");
savevtk("Step_Temperature.vtk", Th, T, dataname="temperature");
