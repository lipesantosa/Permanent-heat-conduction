// Libraries
load "iovtk"

// Parameters
int h = 5;
int j = 20;
int m = 2;
int l = 1;
int n = 300;

real mu = 1.0; 

real rho = 1;     
real Cp = 1;      
real k = 10; 

func fx = 0;   
func fy = 0; 

// Mesh
border a(t=h, j) {x=t; y=0; label=1;}        
border b(t=0, m) {x=j; y=t; label=2;}       
border c(t=0, j) {x=j-t; y=m; label=3;}     
border d(t=0, l) {x=0; y=2-t; label=4;}      
border e(t=0, h) {x=t; y=l; label=5;}        
border f(t=0, l) {x=h; y=1-t; label=6;}      

mesh Th = buildmesh(a(n) + b(n) + c(n) + d(n) + e(n) + f(n)); 

// Fespace
fespace Uh(Th, P1);
Uh u1, u2;
Uh v1, v2;

fespace Ph(Th, P1);
Ph p;
Ph q;

fespace Vh(Th, P1);
Vh T, Tn;

// func parabola = -3*(y-1)*(y-2);
func parabola = 10;

//Solve velocities
problem Stokes([u1, u2, p], [v1, v2, q]) =
    int2d(Th)(mu * (dx(u1)*dx(v1) + dy(u1)*dy(v1)
                  + dx(u2)*dx(v2) + dy(u2)*dy(v2))
              - p*(dx(v1) + dy(v2))
              - q*(dx(u1) + dy(u2)))
    + int2d(Th)(fx*v1 + fy*v2)
    + on(1, 3, 5, 6, u1=0, u2=0) 
    + on(4, u1=parabola, u2=0)
    + int2d(Th, 2)(v1 + v2);

Stokes;

//Solve temperatures
problem Thermic (T, Tn)
    = int2d(Th)(rho * Cp * (u1 * dx(T) + u2 * dy(T)) * Tn)   // Convection term
    + int2d(Th)(k * ((dx(T) * dx(Tn)) + (dy(T) * dy(Tn)))) // Diffusion term
    + on(1, 3, 5, 6, T=0)  // Thermal boundary conditions
    + on(4, T=parabola);
    //- int1d(Th, 2)(k * dx(T) * Tn);         

Thermic;

//plot(u1,u2,p,T, fill=true, value=true, wait=true);


//Save .vtk
// savevtk("D:/Documentos/Permanent-heat-conduction/Step_1.vtk", Th, [u1, u2], dataname="velocity");

//Open archive and attributes 
ofstream vtkfile("D:/Documentos/Permanent-heat-conduction/results.vtk");
vtkfile << "# vtk DataFile Version 3.0\n";
vtkfile << "VTK output from FreeFEM\n";
vtkfile << "ASCII\n";
vtkfile << "DATASET UNSTRUCTURED_GRID\n";

//Define points
vtkfile << "POINTS " << Th.nv << " float\n";
for (int i = 0; i < Th.nv; i++) {
    vtkfile << Th(i).x << " " << Th(i).y << " 0\n";
}

//Define elements 
vtkfile << "CELLS " << Th.nt << " " << 4 * Th.nt << "\n";
for (int i = 0; i < Th.nt; i++) {
    vtkfile << "3 " << Th[i][0] << " " << Th[i][1] << " " << Th[i][2] << "\n";
}

//Tips of cells
vtkfile << "CELL_TYPES " << Th.nt << "\n";
for (int i = 0; i < Th.nt; i++) {
    vtkfile << "5\n"; 
}

vtkfile << "POINT_DATA " << Th.nv << "\n"; 

//Solutions of velocity
vtkfile << "VECTORS Velocity float\n";
for (int i = 0; i < Th.nv; i++) {
    vtkfile << u1[][i] << " " << u2[][i] << " 0.0\n";  
}
// vtkfile << "SCALARS VelocityX float 1\n";
// vtkfile << "LOOKUP_TABLE default\n";
// for (int i = 0; i < u1.n; i++) {
//     vtkfile << u1[][i] << "\n";
// }

// vtkfile << "SCALARS VelocityY float 1\n";
// vtkfile << "LOOKUP_TABLE default\n";
// for (int i = 0; i < Th.nv; i++) {
//     vtkfile << u2[][i] << "\n";
// }

//Solutions of pressure
vtkfile << "SCALARS Pressure float 1\n";
vtkfile << "LOOKUP_TABLE default\n";
for (int i = 0; i < Th.nv; i++) {
    vtkfile << p[][i] << "\n";
}

//Solutions of temperature
vtkfile << "SCALARS Temperature float 1\n";
vtkfile << "LOOKUP_TABLE default\n";
for (int i = 0; i < Th.nv; i++) {
    vtkfile << T[][i] << "\n";
}

